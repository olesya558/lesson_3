# 1. Даны значения зарплат из выборки выпускников:
# 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150.
# Посчитать (желательно без использования статистических методов наподобие std, var, mean)
# среднее арифметическое, среднее квадратичное отклонение,
# смещенную и несмещенную оценки дисперсий для данной выборки.

import numpy as np

salaries = np.array([100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150])
# среднее арифметическое
salaries_mean = salaries.sum() / salaries.size
print(salaries_mean)
# ответ 65.3

# среднеквадратическое отклонение
standard_deviation = (np.sum((salaries - salaries_mean)**2) / salaries.size)**0.5
print(standard_deviation)
# ответ 30.823854398825596

# смещенная дисперсия
variance_biased = np.sum((salaries - salaries_mean)**2) / salaries.size
print(variance_biased)
# ответ 950.11

# несмещенная дисперсия

unbiased_variance = np.sum((salaries - salaries_mean)**2) / (salaries.size - 1)
print(unbiased_variance)
# ответ 1000.1157894736842

# 2. В первом ящике находится 8 мячей, из которых 5 - белые.
# Во втором ящике - 12 мячей, из которых 5 белых.
# Из первого ящика вытаскивают случайным образом два мяча, из второго - 4.
# Какова вероятность того, что 3 мяча белые?

from math import factorial
def combinations(n, k):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))

# три белых
p1 = combinations(5, 2)/combinations(8, 2) * combinations(5, 1)*combinations(4, 3)/combinations(12, 4)
print(p1)
# ответ 0.01443001443001443
p2 = combinations(5, 0)/combinations(8, 2) * combinations(5, 3)*combinations(4, 1)/combinations(12, 4)
print(p2)
# ответ 0.0028860028860028856
p3 = combinations(5, 1)/combinations(8, 2) * combinations(5, 3)*combinations(4, 1)/combinations(12, 4)
P = p1 + p2 + p3
print(P)
# ответ 0.031746031746031744

# 3. На соревновании по биатлону один из трех спортсменов стреляет и попадает в мишень.
# Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8, для третьего — 0.6.
# Найти вероятность того, что выстрел произведен:
# a). первым спортсменом
# б). вторым спортсменом
# в). третьим спортсменом.

A = 1/3 * 0.9 + 1/3 * 0.8 + 1/3 * 0.6
print(A)

first_sp = (1/3 * 0.9) / A
print(first_sp)
# ответ 0.391304347826087

second_sp = (1/3 * 0.8) / A
print(second_sp)
# ответ 0.3478260869565218

third_sp = (1/3 * 0.6) / A
print(third_sp)
# ответ 0.2608695652173913

# 4. В университет на факультеты A и B поступило равное количество студентов,
# а на факультет C студентов поступило столько же, сколько на A и B вместе.
# Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8.
# Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9.
# Студент сдал первую сессию. Какова вероятность, что он учится:
# a). на факультете A
# б). на факультете B
# в). на факультете C?

A = 1/4 * 0.8 + 1/4 * 0.7 + 1/2 * 0.9
department_A = (1/4 * 0.8) / A
print(department_A)
# ответ 0.24242424242424246
department_B = (1/4 * 0.7) / A
print(department_B)
# ответ 0.21212121212121213
department_C = (1/2 * 0.9) / A
print(department_C)
# ответ 0.5454545454545455

# 5. Устройство состоит из трех деталей.
# Для первой детали вероятность выйти из строя в первый месяц равна 0.1, для второй - 0.2,
# для третьей - 0.25. Какова вероятность того, что в первый месяц выйдут из строя:
# а). все детали
# б). только две детали
# в). хотя бы одна деталь
# г). от одной до двух деталей?

A = 1/3 * 0.1 + 1/3 * 0.2 + 1/3 * 0.25
print(A)

def pyasson_comb(m, n, p):
   lambda_= n * p
   return lambda_**m / factorial(m) * np.exp(-lambda_)

# все детали
print(pyasson_comb(3, 30, A))
# ответ 0.11332276634574319

# две детали
print(pyasson_comb(2, 30, A))
# ответ 0.06181241800676901

# одна деталь
print(pyasson_comb(1, 30, A))
# ответ 0.022477242911552366

